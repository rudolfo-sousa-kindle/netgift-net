{"ast":null,"code":"/**\n * microplugin.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.MicroPlugin = factory();\n  }\n})(this, function () {\n  var MicroPlugin = {};\n\n  MicroPlugin.mixin = function (Interface) {\n    Interface.plugins = {};\n    /**\n     * Initializes the listed plugins (with options).\n     * Acceptable formats:\n     *\n     * List (without options):\n     *   ['a', 'b', 'c']\n     *\n     * List (with options):\n     *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n     *\n     * Hash (with options):\n     *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n     *\n     * @param {mixed} plugins\n     */\n\n    Interface.prototype.initializePlugins = function (plugins) {\n      var i, n, key;\n      var self = this;\n      var queue = [];\n      self.plugins = {\n        names: [],\n        settings: {},\n        requested: {},\n        loaded: {}\n      };\n\n      if (utils.isArray(plugins)) {\n        for (i = 0, n = plugins.length; i < n; i++) {\n          if (typeof plugins[i] === 'string') {\n            queue.push(plugins[i]);\n          } else {\n            self.plugins.settings[plugins[i].name] = plugins[i].options;\n            queue.push(plugins[i].name);\n          }\n        }\n      } else if (plugins) {\n        for (key in plugins) {\n          if (plugins.hasOwnProperty(key)) {\n            self.plugins.settings[key] = plugins[key];\n            queue.push(key);\n          }\n        }\n      }\n\n      while (queue.length) {\n        self.require(queue.shift());\n      }\n    };\n\n    Interface.prototype.loadPlugin = function (name) {\n      var self = this;\n      var plugins = self.plugins;\n      var plugin = Interface.plugins[name];\n\n      if (!Interface.plugins.hasOwnProperty(name)) {\n        throw new Error('Unable to find \"' + name + '\" plugin');\n      }\n\n      plugins.requested[name] = true;\n      plugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n      plugins.names.push(name);\n    };\n    /**\n     * Initializes a plugin.\n     *\n     * @param {string} name\n     */\n\n\n    Interface.prototype.require = function (name) {\n      var self = this;\n      var plugins = self.plugins;\n\n      if (!self.plugins.loaded.hasOwnProperty(name)) {\n        if (plugins.requested[name]) {\n          throw new Error('Plugin has circular dependency (\"' + name + '\")');\n        }\n\n        self.loadPlugin(name);\n      }\n\n      return plugins.loaded[name];\n    };\n    /**\n     * Registers a plugin.\n     *\n     * @param {string} name\n     * @param {function} fn\n     */\n\n\n    Interface.define = function (name, fn) {\n      Interface.plugins[name] = {\n        'name': name,\n        'fn': fn\n      };\n    };\n  };\n\n  var utils = {\n    isArray: Array.isArray || function (vArg) {\n      return Object.prototype.toString.call(vArg) === '[object Array]';\n    }\n  };\n  return MicroPlugin;\n});","map":null,"metadata":{},"sourceType":"script"}