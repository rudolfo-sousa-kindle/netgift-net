{"ast":null,"code":"import _objectSpread from \"/Users/rudolfo/Documents/projects/NetGift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_EVENT_BEGIN, FETCH_EVENTS_BEGIN_NEXT, FETCH_EVENT_SUCCESS, FETCH_ONEEVENT_SUCCESS, FETCH_EVENTCATEGORIES_SUCCESS, FETCH_EVENT_FAILURE, SEND_EVENT_SUCCESS } from '../actions/eventsActions';\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEND_EVENT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        messagem: \"Tema adicionado com sucesso!\"\n      });\n\n    case FETCH_EVENT_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_EVENTS_BEGIN_NEXT:\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingNext: true,\n        error: null\n      });\n\n    case FETCH_EVENT_FAILURE:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    case FETCH_EVENT_SUCCESS:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingNext: false,\n        items: action.payload.events\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/reducers/eventsReducerAdmin.js"],"names":["FETCH_EVENT_BEGIN","FETCH_EVENTS_BEGIN_NEXT","FETCH_EVENT_SUCCESS","FETCH_ONEEVENT_SUCCESS","FETCH_EVENTCATEGORIES_SUCCESS","FETCH_EVENT_FAILURE","SEND_EVENT_SUCCESS","initialState","items","loading","error","productReducer","state","action","type","messagem","loadingNext","payload","events"],"mappings":";AAAA,SACIA,iBADJ,EAEIC,uBAFJ,EAGIC,mBAHJ,EAIIC,sBAJJ,EAKIC,6BALJ,EAMIC,mBANJ,EAOIC,kBAPJ,QAQO,0BARP;AAUE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AACnE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKR,kBAAL;AACE,+BACKM,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEM,QAAAA,QAAQ,EAAE;AAHZ;;AAKF,SAAKf,iBAAL;AACE;AACA;AACA,+BACKY,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMA,SAAKT,uBAAL;AACE,+BACKW,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEO,QAAAA,WAAW,EAAE,IAHf;AAIEN,QAAAA,KAAK,EAAE;AAJT;;AAOJ,SAAKL,mBAAL;AACE;AACA;AAEA,+BACOO,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP,KAH1B;AAIIF,QAAAA,KAAK,EAAE;AAJX;;AAOF,SAAKN,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACOU,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIO,QAAAA,WAAW,EAAE,KAHjB;AAIIR,QAAAA,KAAK,EAAEK,MAAM,CAACI,OAAP,CAAeC;AAJ1B;;AAOF;AACE;AACA,aAAON,KAAP;AApDJ;AAsDD","sourcesContent":["import {\n    FETCH_EVENT_BEGIN,\n    FETCH_EVENTS_BEGIN_NEXT,\n    FETCH_EVENT_SUCCESS,\n    FETCH_ONEEVENT_SUCCESS,\n    FETCH_EVENTCATEGORIES_SUCCESS,\n    FETCH_EVENT_FAILURE,\n    SEND_EVENT_SUCCESS,\n} from '../actions/eventsActions';\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n\n  export default function productReducer(state = initialState, action) {\n    switch(action.type) {\n      case SEND_EVENT_SUCCESS:\n        return{\n          ...state,\n          loading: false,\n          messagem: \"Tema adicionado com sucesso!\"\n        };\n      case FETCH_EVENT_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n\n        case FETCH_EVENTS_BEGIN_NEXT:\n          return {\n            ...state,\n            loading: false,\n            loadingNext: true,\n            error: null\n          }\n  \n      case FETCH_EVENT_FAILURE:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        \n        return {\n            ...state,\n            loading: false,\n            error: action.payload.error,\n            items: []\n          };\n  \n      case FETCH_EVENT_SUCCESS:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n            ...state,\n            loading: false,\n            loadingNext: false,\n            items: action.payload.events\n          };        \n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}