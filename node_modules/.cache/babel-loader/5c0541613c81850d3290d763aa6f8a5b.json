{"ast":null,"code":"import _objectSpread from \"/Users/rudolfo/Documents/projects/NetGift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_CHECKOUT_BILLET_BEGIN, FETCH_CHECKOUT_BILLET_FAILURE, FETCH_CHECKOUT_BILLET_SUCCESS } from '../actions/checkoutBilletAction';\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_CHECKOUT_BILLET_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_CHECKOUT_BILLET_FAILURE:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    case FETCH_CHECKOUT_BILLET_SUCCESS:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.checkoutBillet\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/reducers/checkoutBilletReducer.js"],"names":["FETCH_CHECKOUT_BILLET_BEGIN","FETCH_CHECKOUT_BILLET_FAILURE","FETCH_CHECKOUT_BILLET_SUCCESS","initialState","items","loading","error","productReducer","state","action","type","payload","checkoutBillet"],"mappings":";AAAA,SACIA,2BADJ,EAEIC,6BAFJ,EAGIC,6BAHJ,QAIO,iCAJP;AAME,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AAEnE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKV,2BAAL;AACE;AACA;AACA,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKL,6BAAL;AACE;AACA;AACA,+BACOO,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAH1B;AAIIF,QAAAA,KAAK,EAAE;AAJX;;AAOF,SAAKF,6BAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,+BACOM,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC;AAH1B;;AAOF;AACE;AACA,aAAOJ,KAAP;AAtCJ;AAwCD","sourcesContent":["import {\n    FETCH_CHECKOUT_BILLET_BEGIN,\n    FETCH_CHECKOUT_BILLET_FAILURE,\n    FETCH_CHECKOUT_BILLET_SUCCESS\n} from '../actions/checkoutBilletAction';\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n\n  export default function productReducer(state = initialState, action) {\n\n    switch(action.type) {\n      case FETCH_CHECKOUT_BILLET_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_CHECKOUT_BILLET_FAILURE:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n            ...state,\n            loading: false,\n            error: action.payload.error,\n            items: []\n          };\n  \n      case FETCH_CHECKOUT_BILLET_SUCCESS:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n                \n        return {\n            ...state,\n            loading: false,\n            items: action.payload.checkoutBillet\n          };\n        \n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}