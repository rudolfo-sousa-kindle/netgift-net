{"ast":null,"code":"import _objectSpread from \"/Users/rudolfo/Documents/projects/NetGift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_EXTRATO_BEGIN, FETCH_EXTRATO_SUCCESS, FETCH_EXTRATO_ABSTRACT_SUCCESS, FETCH_EXTRATO_FAILURE } from '../actions/extratoActions';\nconst initialState = {\n  extrato: [],\n  loading: true,\n  error: null\n};\nexport default function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_EXTRATO_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_EXTRATO_FAILURE:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        extrato: []\n      });\n\n    case FETCH_EXTRATO_SUCCESS:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        extrato: action.payload.extrato\n      });\n\n    case FETCH_EXTRATO_ABSTRACT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        extratoAbstract: action.payload.extrato\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/reducers/extratoReducer.js"],"names":["FETCH_EXTRATO_BEGIN","FETCH_EXTRATO_SUCCESS","FETCH_EXTRATO_ABSTRACT_SUCCESS","FETCH_EXTRATO_FAILURE","initialState","extrato","loading","error","productReducer","state","action","type","payload","extratoAbstract"],"mappings":";AAAA,SACIA,mBADJ,EAEIC,qBAFJ,EAGIC,8BAHJ,EAIIC,qBAJJ,QAKO,2BALP;AAOE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AAEnE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKX,mBAAL;AACE;AACA;AACA,+BACKS,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKJ,qBAAL;AACE;AACA;AAEA,+BACOM,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAH1B;AAIIF,QAAAA,OAAO,EAAE;AAJb;;AAOF,SAAKJ,qBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACOQ,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,OAAO,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAH5B;;AAME,SAAKH,8BAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEO,QAAAA,eAAe,EAAEH,MAAM,CAACE,OAAP,CAAeP;AAHlC;;AAMN;AACE;AACA,aAAOI,KAAP;AA5CJ;AA8CD","sourcesContent":["import {\n    FETCH_EXTRATO_BEGIN,\n    FETCH_EXTRATO_SUCCESS,\n    FETCH_EXTRATO_ABSTRACT_SUCCESS,\n    FETCH_EXTRATO_FAILURE\n} from '../actions/extratoActions';\n  \n  const initialState = {\n    extrato: [],\n    loading: true,\n    error: null\n  };\n\n  export default function productReducer(state = initialState, action) {\n    \n    switch(action.type) {\n      case FETCH_EXTRATO_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_EXTRATO_FAILURE:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        \n        return {\n            ...state,\n            loading: false,\n            error: action.payload.error,\n            extrato: []\n          };\n  \n      case FETCH_EXTRATO_SUCCESS:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n            ...state,\n            loading: false,\n            extrato: action.payload.extrato\n          };\n\n          case FETCH_EXTRATO_ABSTRACT_SUCCESS:\n            return {\n              ...state,\n              loading: false,\n              extratoAbstract: action.payload.extrato\n            }\n       \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}