{"ast":null,"code":"/*!\n * EJS - Filters\n * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * First element of the target `obj`.\n */\nexports.first = function (obj) {\n  return obj[0];\n};\n/**\n * Last element of the target `obj`.\n */\n\n\nexports.last = function (obj) {\n  return obj[obj.length - 1];\n};\n/**\n * Capitalize the first letter of the target `str`.\n */\n\n\nexports.capitalize = function (str) {\n  str = String(str);\n  return str[0].toUpperCase() + str.substr(1, str.length);\n};\n/**\n * Downcase the target `str`.\n */\n\n\nexports.downcase = function (str) {\n  return String(str).toLowerCase();\n};\n/**\n * Uppercase the target `str`.\n */\n\n\nexports.upcase = function (str) {\n  return String(str).toUpperCase();\n};\n/**\n * Sort the target `obj`.\n */\n\n\nexports.sort = function (obj) {\n  return Object.create(obj).sort();\n};\n/**\n * Sort the target `obj` by the given `prop` ascending.\n */\n\n\nexports.sort_by = function (obj, prop) {\n  return Object.create(obj).sort(function (a, b) {\n    a = a[prop], b = b[prop];\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n};\n/**\n * Size or length of the target `obj`.\n */\n\n\nexports.size = exports.length = function (obj) {\n  return obj.length;\n};\n/**\n * Add `a` and `b`.\n */\n\n\nexports.plus = function (a, b) {\n  return Number(a) + Number(b);\n};\n/**\n * Subtract `b` from `a`.\n */\n\n\nexports.minus = function (a, b) {\n  return Number(a) - Number(b);\n};\n/**\n * Multiply `a` by `b`.\n */\n\n\nexports.times = function (a, b) {\n  return Number(a) * Number(b);\n};\n/**\n * Divide `a` by `b`.\n */\n\n\nexports.divided_by = function (a, b) {\n  return Number(a) / Number(b);\n};\n/**\n * Join `obj` with the given `str`.\n */\n\n\nexports.join = function (obj, str) {\n  return obj.join(str || ', ');\n};\n/**\n * Truncate `str` to `len`.\n */\n\n\nexports.truncate = function (str, len) {\n  str = String(str);\n  return str.substr(0, len);\n};\n/**\n * Truncate `str` to `n` words.\n */\n\n\nexports.truncate_words = function (str, n) {\n  var str = String(str),\n      words = str.split(/ +/);\n  return words.slice(0, n).join(' ');\n};\n/**\n * Replace `pattern` with `substitution` in `str`.\n */\n\n\nexports.replace = function (str, pattern, substitution) {\n  return String(str).replace(pattern, substitution || '');\n};\n/**\n * Prepend `val` to `obj`.\n */\n\n\nexports.prepend = function (obj, val) {\n  return Array.isArray(obj) ? [val].concat(obj) : val + obj;\n};\n/**\n * Append `val` to `obj`.\n */\n\n\nexports.append = function (obj, val) {\n  return Array.isArray(obj) ? obj.concat(val) : obj + val;\n};\n/**\n * Map the given `prop`.\n */\n\n\nexports.map = function (arr, prop) {\n  return arr.map(function (obj) {\n    return obj[prop];\n  });\n};\n/**\n * Reverse the given `obj`.\n */\n\n\nexports.reverse = function (obj) {\n  return Array.isArray(obj) ? obj.reverse() : String(obj).split('').reverse().join('');\n};\n/**\n * Get `prop` of the given `obj`.\n */\n\n\nexports.get = function (obj, prop) {\n  return obj[prop];\n};\n/**\n * Packs the given `obj` into json string\n */\n\n\nexports.json = function (obj) {\n  return JSON.stringify(obj);\n};","map":null,"metadata":{},"sourceType":"script"}