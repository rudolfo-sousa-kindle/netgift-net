{"ast":null,"code":"import _objectSpread from \"/Users/rudolfo/Documents/projects/NetGift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_THEMES_BEGIN, FETCH_THEMES_SUCCESS, FETCH_THEMES_FAILURE, POSTEDTHEME, UNPOSTEDTHEME, POSTEDTHEMEERROR } from '../actions/themesActions.js';\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case POSTEDTHEME:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: null,\n        send: true\n      });\n\n    case UNPOSTEDTHEME:\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null,\n        send: false\n      });\n\n    case POSTEDTHEMEERROR:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        send: false\n      });\n\n    case FETCH_THEMES_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_THEMES_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.themes\n      });\n\n    case FETCH_THEMES_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/reducers/themesReducer.js"],"names":["FETCH_THEMES_BEGIN","FETCH_THEMES_SUCCESS","FETCH_THEMES_FAILURE","POSTEDTHEME","UNPOSTEDTHEME","POSTEDTHEMEERROR","initialState","items","loading","error","productReducer","state","action","type","send","payload","themes"],"mappings":";AAAA,SACIA,kBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,gBANJ,QAOS,6BAPT;AASE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGL,YAAhC,EAA8CM,MAA9C,EAAsD;AACnE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKV,WAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAE,IAHT;AAIEK,QAAAA,IAAI,EAAE;AAJR;;AAMA,SAAKV,aAAL;AACE,+BACGO,KADH;AAEAH,QAAAA,OAAO,EAAE,IAFT;AAGAC,QAAAA,KAAK,EAAE,IAHP;AAIAK,QAAAA,IAAI,EAAE;AAJN;;AAMF,SAAKT,gBAAL;AACE,+BACGM,KADH;AAEAH,QAAAA,OAAO,EAAE,KAFT;AAGAC,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN,KAHtB;AAIAK,QAAAA,IAAI,EAAE;AAJN;;AAMJ,SAAKd,kBAAL;AACE;AACA;AACA,+BACKW,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKR,oBAAL;AACE;AACA;AACA,+BACKU,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeC;AAHxB;;AAMF,SAAKd,oBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACKS,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN,KAHxB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAOF;AACE;AACA,aAAOI,KAAP;AAzDJ;AA2DD","sourcesContent":["import {\n    FETCH_THEMES_BEGIN,\n    FETCH_THEMES_SUCCESS,\n    FETCH_THEMES_FAILURE,\n    POSTEDTHEME,\n    UNPOSTEDTHEME,\n    POSTEDTHEMEERROR\n  } from '../actions/themesActions.js';\n  \n  const initialState = {\n    items: [],\n    loading: false,\n    error: null\n  };\n\n  export default function productReducer(state = initialState, action) {\n    switch(action.type) {\n      case POSTEDTHEME:\n        return {\n          ...state,\n          loading: false,\n          error: null,\n          send: true\n        };\n        case UNPOSTEDTHEME :\n          return{\n          ...state,\n          loading: true,\n          error: null,\n          send: false\n        };\n        case POSTEDTHEMEERROR:\n          return{ \n          ...state,\n          loading: false,\n          error: action.payload.error,\n          send: false\n        }\n      case FETCH_THEMES_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          error: null\n        };\n  \n      case FETCH_THEMES_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          items: action.payload.themes\n        };\n  \n      case FETCH_THEMES_FAILURE:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n          ...state,\n          loading: false,\n          error: action.payload.error,\n          items: []\n        };\n  \n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}