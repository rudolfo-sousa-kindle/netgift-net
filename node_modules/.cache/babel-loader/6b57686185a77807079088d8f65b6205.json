{"ast":null,"code":"import axios from \"axios\";\nimport { parse } from \"path\";\nexport const FETCH_USER_COUNT_BEGIN = 'FETCH_USER_COUNT_BEGIN';\nexport const FETCH_USER_COUNT_SUCCESS = 'FETCH_USER_COUNT_SUCCESS';\nexport const FETCH_USER_COUNT_PASSADO_SUCCESS = 'FETCH_USER_COUNT_PASSADO_SUCCESS';\nexport const FETCH_USER_COUNT_FAILURE = 'FETCH_USER_COUNT_FAILURE';\nconst URL = \"http://51.15.99.120:4700\";\nconst config = {\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"*\"\n  }\n};\nexport const fetchUserCountBegin = () => ({\n  type: FETCH_USER_COUNT_BEGIN\n});\nexport const fetchUserCountSuccess = user => ({\n  type: FETCH_USER_COUNT_SUCCESS,\n  payload: {\n    user\n  }\n});\nexport const fetchUserCountSitesSuccess = sites => ({\n  type: FETCH_USER_COUNT_SUCCESS,\n  payload: {\n    sites\n  }\n});\nexport const fetchUserCountPassadoSuccess = (userPassado, porcentagem) => ({\n  type: FETCH_USER_COUNT_PASSADO_SUCCESS,\n  payload: {\n    userPassado\n  },\n  porcentagem: {\n    porcentagem\n  }\n});\nexport const fetchUserCountFailure = error => ({\n  type: FETCH_USER_COUNT_FAILURE,\n  payload: {\n    error\n  }\n});\nexport function fetchUserCount(periodo) {\n  if (periodo === \"Semanal\") {\n    return dispatch => {\n      dispatch(fetchUserCountBegin());\n      return axios.get(\"\".concat(URL, \"/count/users/1\"), config).then(response => {\n        var totalAtual = 0;\n        var totalPassado = 0;\n        let data = response.data;\n        let total = data.total;\n        totalAtual = total;\n        dispatch(fetchUserCountSuccess(total));\n        axios.get(\"\".concat(URL, \"/count/users/7\"), config).then(response => {\n          let data = response.data;\n          let total = data.total;\n          totalPassado = total;\n          var porcentagem = totalPassado * 100 / total;\n          dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem));\n        });\n      }).catch(error => dispatch(fetchUserCountFailure(error)));\n    };\n  }\n\n  if (periodo === \"Mensal\") {\n    return dispatch => {\n      dispatch(fetchUserCountBegin());\n      return axios.get(\"\".concat(URL, \"/count/users/7\"), config).then(response => {\n        var totalAtual = 0;\n        var totalPassado = 0;\n        let data = response.data;\n        let total = data.total;\n        totalAtual = total;\n        dispatch(fetchUserCountSuccess(total));\n        axios.get(\"\".concat(URL, \"/count/users/14\"), config).then(response => {\n          let data = response.data;\n          let total = data.total;\n          totalPassado = total;\n          var porcentagem = totalPassado * 100 / total;\n          dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem));\n        });\n      }).catch(error => dispatch(fetchUserCountFailure(error)));\n    };\n  }\n}\nexport function fetchUserSites(periodo) {\n  if (periodo === \"Semanal\") {\n    return dispatch => {\n      dispatch(fetchUserCountBegin());\n      return axios.get(\"\".concat(URL, \"/count/sites/1\"), config).then(response => {\n        var totalAtual = 0;\n        var totalPassado = 0;\n        let data = response.data;\n        let total = data.total;\n        totalAtual = total;\n        dispatch(fetchUserCountSuccess(total));\n        axios.get(\"\".concat(URL, \"/count/sites/7\"), config).then(response => {\n          let data = response.data;\n          let total = data.total;\n          totalPassado = total;\n          var porcentagem = totalPassado * 100 / total;\n          dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem));\n        });\n      }).catch(error => dispatch(fetchUserCountFailure(error)));\n    };\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/actions/usersActions.js"],"names":["axios","parse","FETCH_USER_COUNT_BEGIN","FETCH_USER_COUNT_SUCCESS","FETCH_USER_COUNT_PASSADO_SUCCESS","FETCH_USER_COUNT_FAILURE","URL","config","headers","fetchUserCountBegin","type","fetchUserCountSuccess","user","payload","fetchUserCountSitesSuccess","sites","fetchUserCountPassadoSuccess","userPassado","porcentagem","fetchUserCountFailure","error","fetchUserCount","periodo","dispatch","get","then","response","totalAtual","totalPassado","data","total","catch","fetchUserSites"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { parse } from \"path\";\n\nexport const FETCH_USER_COUNT_BEGIN   = 'FETCH_USER_COUNT_BEGIN';\nexport const FETCH_USER_COUNT_SUCCESS   = 'FETCH_USER_COUNT_SUCCESS';\nexport const FETCH_USER_COUNT_PASSADO_SUCCESS   = 'FETCH_USER_COUNT_PASSADO_SUCCESS';\nexport const FETCH_USER_COUNT_FAILURE = 'FETCH_USER_COUNT_FAILURE';\n\nconst URL   = \"http://51.15.99.120:4700\";\n\nconst config = {\n  headers: {\"Access-Control-Allow-Origin\": \"*\", \"Access-Control-Allow-Headers\": \"*\"},\n}\n\nexport const fetchUserCountBegin = () => ({\n  type: FETCH_USER_COUNT_BEGIN\n});\n\nexport const fetchUserCountSuccess = user=> ({\n  type: FETCH_USER_COUNT_SUCCESS,\n  payload: {user}\n});\n\nexport const fetchUserCountSitesSuccess = sites=> ({\n  type: FETCH_USER_COUNT_SUCCESS,\n  payload: {sites}\n});\n\nexport const fetchUserCountPassadoSuccess = (userPassado, porcentagem) => ({\n  type: FETCH_USER_COUNT_PASSADO_SUCCESS,\n  payload: {userPassado},\n  porcentagem: {porcentagem}\n})\n\nexport const fetchUserCountFailure = error => ({\n  type: FETCH_USER_COUNT_FAILURE,\n  payload: { error }\n});\n\nexport function fetchUserCount(periodo) {\n\n  if(periodo === \"Semanal\"){\n      return dispatch => {\n\n      dispatch(fetchUserCountBegin());\n\n      return axios.get(`${URL}/count/users/1`, config)\n        .then((response) => {\n          var totalAtual = 0;\n          var totalPassado = 0;\n\n          let {data} = response;\n          let {total} = data;\n          totalAtual = total;\n          dispatch(fetchUserCountSuccess(total))\n\n          axios.get(`${URL}/count/users/7`, config)\n          .then((response) => {\n            let {data} = response;\n            let {total} = data;\n            totalPassado = total;\n\n            var porcentagem = ((totalPassado*100) / total);\n\n            dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem))\n\n\n          })\n\n\n          })\n        .catch(error => dispatch(fetchUserCountFailure(error)));\n    };\n  }\n\n  if(periodo === \"Mensal\"){\n    return dispatch => {\n\n      dispatch(fetchUserCountBegin());\n\n    return axios.get(`${URL}/count/users/7`, config)\n      .then((response) => {\n        var totalAtual = 0;\n        var totalPassado = 0;\n\n        let {data} = response;\n        let {total} = data;\n        totalAtual = total;\n        dispatch(fetchUserCountSuccess(total))\n\n        axios.get(`${URL}/count/users/14`, config)\n        .then((response) => {\n          let {data} = response;\n          let {total} = data;\n          totalPassado = total;\n\n          var porcentagem = ((totalPassado*100) / total);\n\n          dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem))\n\n\n        })\n\n\n        })\n      .catch(error => dispatch(fetchUserCountFailure(error)));\n    };\n  }\n\n}\n\nexport function fetchUserSites(periodo) {\n  if(periodo === \"Semanal\"){\n    return dispatch => {\n\n    dispatch(fetchUserCountBegin());\n\n    return axios.get(`${URL}/count/sites/1`, config)\n      .then((response) => {\n        var totalAtual = 0;\n        var totalPassado = 0;\n\n        let {data} = response;\n        let {total} = data;\n        totalAtual = total;\n        dispatch(fetchUserCountSuccess(total))\n\n        axios.get(`${URL}/count/sites/7`, config)\n        .then((response) => {\n          let {data} = response;\n          let {total} = data;\n          totalPassado = total;\n\n          var porcentagem = ((totalPassado*100) / total);\n\n          dispatch(fetchUserCountPassadoSuccess(totalPassado, porcentagem))\n\n\n        })\n\n\n        })\n      .catch(error => dispatch(fetchUserCountFailure(error)));\n  };\n}\n}\n"]},"metadata":{},"sourceType":"module"}