{"ast":null,"code":"import _objectSpread from \"/Users/rudolfo/Documents/projects/NetGift/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_GIFT_BEGIN, FETCH_GIFT_SUCCESS, FETCH_ONEGIFT_SUCCESS, FETCH_GIFTCATEGORIES_SUCCESS, FETCH_GIFT_FAILURE, SEND_GIFT_SUCCESS, FETCH_GIFT_BEGIN_NEXT, SEND_GIFT_BEGIN } from '../actions/giftActions.js';\nconst initialState = {\n  items: [],\n  item: [],\n  loading: true,\n  error: null,\n  loadingNext: true,\n  loadingSend: true\n};\nexport default function productReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEND_GIFT_BEGIN:\n      return _objectSpread({}, state, {\n        loadingSend: true\n      });\n\n    case FETCH_GIFT_BEGIN_NEXT:\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingNext: true,\n        loadingSend: false\n      });\n\n    case FETCH_GIFT_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        loadingOne: false,\n        loadingNext: false,\n        loadingSend: false,\n        error: null\n      });\n\n    case FETCH_GIFT_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingOne: true,\n        items: action.payload.gifts,\n        loadingNext: false,\n        loadingSend: false\n      });\n\n    case FETCH_ONEGIFT_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingOne: false,\n        loadingSend: false,\n        item: action.payload.gift\n      });\n\n    case FETCH_GIFTCATEGORIES_SUCCESS:\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingSend: false,\n        giftsCategories: action.payload.gifts\n      });\n\n    case FETCH_GIFT_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        loadingSend: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    case SEND_GIFT_SUCCESS:\n      return _objectSpread({}, state, {\n        success: action.payload.data,\n        loading: false,\n        loadingSend: false,\n        loadingSend: false\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/rudolfo/Documents/projects/NetGift/src/reducers/giftReducer.js"],"names":["FETCH_GIFT_BEGIN","FETCH_GIFT_SUCCESS","FETCH_ONEGIFT_SUCCESS","FETCH_GIFTCATEGORIES_SUCCESS","FETCH_GIFT_FAILURE","SEND_GIFT_SUCCESS","FETCH_GIFT_BEGIN_NEXT","SEND_GIFT_BEGIN","initialState","items","item","loading","error","loadingNext","loadingSend","productReducer","state","action","type","loadingOne","payload","gifts","gift","giftsCategories","success","data"],"mappings":";AAAA,SACIA,gBADJ,EAEIC,kBAFJ,EAGIC,qBAHJ,EAIIC,4BAJJ,EAKIC,kBALJ,EAMIC,iBANJ,EAOIC,qBAPJ,EAQIC,eARJ,QASS,2BATT;AAWE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,WAAW,EAAE,IALM;AAMnBC,EAAAA,WAAW,EAAE;AANM,CAArB;AASA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGR,YAAhC,EAA8CS,MAA9C,EAAsD;AACnE,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAKX,eAAL;AACA,+BACKS,KADL;AAEEF,QAAAA,WAAW,EAAE;AAFf;;AAKA,SAAKR,qBAAL;AACE,+BACKU,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEE,QAAAA,WAAW,EAAE,IAHf;AAIEC,QAAAA,WAAW,EAAE;AAJf;;AAMF,SAAKd,gBAAL;AACE;AACA;AACA,+BACKgB,KADL;AAEEL,QAAAA,OAAO,EAAE,IAFX;AAGEQ,QAAAA,UAAU,EAAE,KAHd;AAIEN,QAAAA,WAAW,EAAE,KAJf;AAKEC,QAAAA,WAAW,EAAE,KALf;AAMEF,QAAAA,KAAK,EAAE;AANT;;AASF,SAAKX,kBAAL;AACE;AACA;AACA,+BACKe,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEQ,QAAAA,UAAU,EAAE,IAHd;AAIEV,QAAAA,KAAK,EAAEQ,MAAM,CAACG,OAAP,CAAeC,KAJxB;AAKER,QAAAA,WAAW,EAAE,KALf;AAMEC,QAAAA,WAAW,EAAE;AANf;;AASA,SAAKZ,qBAAL;AACE,+BACKc,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEQ,QAAAA,UAAU,EAAE,KAHd;AAIEL,QAAAA,WAAW,EAAE,KAJf;AAKEJ,QAAAA,IAAI,EAAEO,MAAM,CAACG,OAAP,CAAeE;AALvB;;AAQF,SAAKnB,4BAAL;AACA,+BACKa,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEG,QAAAA,WAAW,EAAE,KAHf;AAIES,QAAAA,eAAe,EAAEN,MAAM,CAACG,OAAP,CAAeC;AAJlC;;AAOF,SAAKjB,kBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACKY,KADL;AAEEL,QAAAA,OAAO,EAAE,KAFX;AAGEG,QAAAA,WAAW,EAAE,KAHf;AAIEF,QAAAA,KAAK,EAAEK,MAAM,CAACG,OAAP,CAAeR,KAJxB;AAKEH,QAAAA,KAAK,EAAE;AALT;;AAQA,SAAKJ,iBAAL;AACA,+BACKW,KADL;AAEEQ,QAAAA,OAAO,EAAEP,MAAM,CAACG,OAAP,CAAeK,IAF1B;AAGEd,QAAAA,OAAO,EAAE,KAHX;AAIEG,QAAAA,WAAW,EAAE,KAJf;AAKEA,QAAAA,WAAW,EAAE;AALf;;AAQF;AACE;AACA,aAAOE,KAAP;AAnFJ;AAqFD","sourcesContent":["import {\n    FETCH_GIFT_BEGIN,\n    FETCH_GIFT_SUCCESS,\n    FETCH_ONEGIFT_SUCCESS,\n    FETCH_GIFTCATEGORIES_SUCCESS,\n    FETCH_GIFT_FAILURE,\n    SEND_GIFT_SUCCESS,\n    FETCH_GIFT_BEGIN_NEXT,\n    SEND_GIFT_BEGIN\n  } from '../actions/giftActions.js';\n\n  const initialState = {\n    items: [],\n    item: [],\n    loading: true,\n    error: null,\n    loadingNext: true,\n    loadingSend: true\n  };\n\n  export default function productReducer(state = initialState, action) {\n    switch(action.type) {\n\n      case SEND_GIFT_BEGIN:\n      return{\n        ...state,\n        loadingSend: true\n      }\n\n      case FETCH_GIFT_BEGIN_NEXT:\n        return {\n          ...state,\n          loading: false,\n          loadingNext: true,\n          loadingSend: false\n        }\n      case FETCH_GIFT_BEGIN:\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return {\n          ...state,\n          loading: true,\n          loadingOne: false,\n          loadingNext: false,\n          loadingSend: false,\n          error: null\n        };\n\n      case FETCH_GIFT_SUCCESS:\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return {\n          ...state,\n          loading: false,\n          loadingOne: true,\n          items: action.payload.gifts,\n          loadingNext: false,\n          loadingSend: false\n        };\n\n        case FETCH_ONEGIFT_SUCCESS:\n          return{\n            ...state,\n            loading: false,\n            loadingOne: false,\n            loadingSend: false,\n            item: action.payload.gift\n          }\n\n        case FETCH_GIFTCATEGORIES_SUCCESS: \n        return {\n          ...state,\n          loading: false,\n          loadingSend: false,\n          giftsCategories: action.payload.gifts\n        }\n\n      case FETCH_GIFT_FAILURE:\n        // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n        return {\n          ...state,\n          loading: false,\n          loadingSend: false,\n          error: action.payload.error,\n          items: []\n        };\n\n        case SEND_GIFT_SUCCESS:\n        return {\n          ...state,\n          success: action.payload.data,\n          loading: false,\n          loadingSend: false,\n          loadingSend: false\n        }\n\n      default:\n        // ALWAYS have a default case in a reducer\n        return state;\n    }\n  }\n"]},"metadata":{},"sourceType":"module"}